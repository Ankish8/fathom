// Email Service for Meeting Notifications
// Agent 3: Backend API Engineer

import nodemailer from 'nodemailer';

interface EmailOptions {
  to: string;
  participantName: string;
  meetingTitle: string;
  content: string;
}

class EmailService {
  private transporter: nodemailer.Transporter;
  private isConfigured: boolean = false;

  constructor() {
    this.initializeTransporter();
  }

  private initializeTransporter() {
    try {
      // Configure email transporter
      this.transporter = nodemailer.createTransporter({
        host: process.env.SMTP_HOST || 'smtp.gmail.com',
        port: parseInt(process.env.SMTP_PORT || '587'),
        secure: false, // true for 465, false for other ports
        auth: {
          user: process.env.SMTP_USER,
          pass: process.env.SMTP_PASS,
        },
        tls: {
          rejectUnauthorized: false
        }
      });

      this.isConfigured = !!(process.env.SMTP_USER && process.env.SMTP_PASS);
      
      if (this.isConfigured) {
        console.log('ðŸ“§ Email service configured successfully');
      } else {
        console.warn('ðŸ“§ Email service not configured - missing SMTP credentials');
      }
    } catch (error) {
      console.error('ðŸ“§ Failed to initialize email service:', error);
      this.isConfigured = false;
    }
  }

  async sendMeetingSummary(options: EmailOptions): Promise<boolean> {
    if (!this.isConfigured) {
      console.warn('ðŸ“§ Email service not configured, skipping email send');
      return false;
    }

    try {
      const htmlContent = this.generateHTMLEmail(options);
      const textContent = this.generateTextEmail(options);

      const mailOptions = {
        from: {
          name: 'Meeting Assistant',
          address: process.env.SMTP_USER || 'noreply@meetingassistant.com'
        },
        to: options.to,
        subject: `ðŸ“‹ Meeting Summary: ${options.meetingTitle}`,
        text: textContent,
        html: htmlContent,
        headers: {
          'X-Meeting-Assistant': 'true',
          'X-Auto-Generated': 'true'
        }
      };

      console.log(`ðŸ“§ Sending meeting summary to ${options.to}...`);
      
      const result = await this.transporter.sendMail(mailOptions);
      
      console.log(`ðŸ“§ Email sent successfully to ${options.to}:`, result.messageId);
      return true;

    } catch (error) {
      console.error(`ðŸ“§ Failed to send email to ${options.to}:`, error);
      throw error;
    }
  }

  private generateHTMLEmail(options: EmailOptions): string {
    const lines = options.content.split('\n');
    let htmlContent = '';
    let currentSection = '';

    for (const line of lines) {
      const trimmedLine = line.trim();
      
      if (trimmedLine.startsWith('Meeting Summary:')) {
        htmlContent += `<h1 style="color: #000; font-size: 24px; margin-bottom: 20px; border-bottom: 3px solid #000; padding-bottom: 10px;">${trimmedLine}</h1>`;
      } else if (trimmedLine.endsWith(':') && !trimmedLine.includes('.')) {
        currentSection = trimmedLine;
        htmlContent += `<h2 style="color: #000; font-size: 18px; margin: 20px 0 10px 0; font-weight: bold;">${trimmedLine}</h2>`;
      } else if (trimmedLine.match(/^\d+\./)) {
        htmlContent += `<p style="margin: 8px 0; padding-left: 20px; color: #333;">${trimmedLine}</p>`;
      } else if (trimmedLine.length > 0) {
        htmlContent += `<p style="margin: 10px 0; color: #333; line-height: 1.5;">${trimmedLine}</p>`;
      }
    }

    return `
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Meeting Summary</title>
</head>
<body style="font-family: 'Arial', sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #ffffff; color: #000000;">
  <div style="border: 3px solid #000000; padding: 30px; background-color: #ffffff;">
    
    <!-- Header -->
    <div style="text-align: center; margin-bottom: 30px; padding-bottom: 20px; border-bottom: 2px solid #000000;">
      <h1 style="margin: 0; font-size: 20px; font-weight: bold; letter-spacing: 1px;">MEETING ASSISTANT</h1>
      <p style="margin: 5px 0 0 0; color: #666; font-size: 14px;">Automated Meeting Summary</p>
    </div>

    <!-- Content -->
    <div style="margin-bottom: 30px;">
      ${htmlContent}
    </div>

    <!-- Footer -->
    <div style="border-top: 2px solid #000000; padding-top: 20px; text-align: center; color: #666; font-size: 12px;">
      <p style="margin: 0;">This summary was automatically generated by Meeting Assistant</p>
      <p style="margin: 5px 0 0 0;">Free â€¢ No Sign-up Required â€¢ Privacy-Focused</p>
    </div>

  </div>
</body>
</html>
    `.trim();
  }

  private generateTextEmail(options: EmailOptions): string {
    return `
MEETING ASSISTANT
Automated Meeting Summary

${options.content}

---
This summary was automatically generated by Meeting Assistant
Free â€¢ No Sign-up Required â€¢ Privacy-Focused
    `.trim();
  }

  async testConnection(): Promise<boolean> {
    if (!this.isConfigured) {
      return false;
    }

    try {
      await this.transporter.verify();
      console.log('ðŸ“§ Email service connection test successful');
      return true;
    } catch (error) {
      console.error('ðŸ“§ Email service connection test failed:', error);
      return false;
    }
  }

  // Bulk email sending for multiple participants
  async sendBulkMeetingSummary(
    meetingTitle: string,
    content: string,
    participants: Array<{ name: string; email: string }>
  ): Promise<{ sent: number; failed: number; errors: string[] }> {
    
    const results = {
      sent: 0,
      failed: 0,
      errors: [] as string[]
    };

    if (!this.isConfigured) {
      results.errors.push('Email service not configured');
      results.failed = participants.length;
      return results;
    }

    const sendPromises = participants.map(async (participant) => {
      try {
        await this.sendMeetingSummary({
          to: participant.email,
          participantName: participant.name,
          meetingTitle,
          content
        });
        results.sent++;
      } catch (error) {
        results.failed++;
        results.errors.push(`${participant.email}: ${error instanceof Error ? error.message : 'Unknown error'}`);
      }
    });

    await Promise.allSettled(sendPromises);
    
    console.log(`ðŸ“§ Bulk email results: ${results.sent} sent, ${results.failed} failed`);
    return results;
  }
}

export const emailService = new EmailService();

// Export individual functions for compatibility
export async function sendMeetingSummary(options: EmailOptions): Promise<boolean> {
  return emailService.sendMeetingSummary(options);
}

export async function testEmailConnection(): Promise<boolean> {
  return emailService.testConnection();
}